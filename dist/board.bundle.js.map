{"version":3,"file":"board.bundle.js","mappings":"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","sources":["webpack://battleship/./src/board.js","webpack://battleship/./src/extractCoordinates.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/jsonConversion.js","webpack://battleship/./src/player.js","webpack://battleship/./src/setupOfShip/boardDom.js","webpack://battleship/./src/ship.js"],"sourcesContent":["import Player from \"./player\";\nimport extractCoordinates from \"./extractCoordinates\";\nimport { reviver } from \"./jsonConversion\";\nimport * as display from \"./setupOfShip/boardDom\";\nimport style from \"./styles/board.css\";\nimport textLines from \"./textLines.json\";\n\nlet enemyMap = new Map();\nlet typingEffect = null; // Global variable to hold the intervals\nfunction updateEnemyMap(gameboard) {\n  const replaceMap = new Map();\n  gameboard.forEach((value, index) => {\n    replaceMap.set(index, value);\n  });\n  enemyMap = replaceMap;\n}\n\nfunction showMessage(message) {\n  const gameStatus = document.getElementById(\"gameStatus\");\n  if (typingEffect) {\n    clearInterval(typingEffect); // Clear the interval if already running\n  }\n  gameStatus.textContent = \"\";\n  let index = 0;\n  typingEffect = setInterval(() => {\n    // Check if all characters have been displayed\n    if (index <= message.length) {\n      gameStatus.textContent = message.substring(0, index);\n      index += 1;\n    } else {\n      clearInterval(typingEffect); // Stop the interval when done\n      typingEffect = null; // Reset the typingEffect variable\n    }\n  }, 50); // Adjust the delay (in milliseconds) between each character\n}\n\nfunction createCellAttackEvent(resolve) {\n  const enemyBoard = document.getElementById(\"enemyBoard\");\n  const cells = enemyBoard.querySelectorAll(\".cell\");\n  Array.from(cells).forEach((cell) => {\n    cell.addEventListener(\"click\", () => {\n      const coordinate = cell.dataset.id;\n      if (\n        enemyMap.get(coordinate) === \"hit\" ||\n        enemyMap.get(coordinate) === \"miss\"\n      ) {\n        showMessage(textLines.wrongCell);\n      } else {\n        resolve(coordinate);\n      }\n    });\n  });\n}\n\nasync function getUserAttack(resolve) {\n  const attackCoordinates = await createCellAttackEvent(resolve);\n  return attackCoordinates;\n}\n\nasync function turnLoops(initialPlayer, secondPlayer) {\n  let currentPlayer = initialPlayer;\n  let enemy = secondPlayer;\n  let status;\n  while (!enemy.getGameboard().allShipsSunk()) {\n    if (status) {\n      showMessage(textLines.atckExitosoNext);\n    } else if (status === false) {\n      showMessage(textLines.atckFallidoNext);\n    }\n    if (!currentPlayer.getIsComputer() && !enemy.getIsComputer()) {\n      display.setCurtainName(currentPlayer.name);\n      display.showCurtain();\n    }\n    display.fillBoard(currentPlayer.getGameboard().getCells(), true);\n    display.fillBoard(enemy.getGameboard().getCells(), false);\n    updateEnemyMap(enemy.getGameboard().getCells());\n    display.addCellsHoverEvent(enemyMap);\n    let attack;\n    if (currentPlayer.getIsComputer()) {\n      if (currentPlayer.getIsComputer() && enemy.getIsComputer()) {\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n      }\n      attack = currentPlayer.getComputerPlay(enemy.getGameboard().getCells());\n    } else {\n      attack = await new Promise(getUserAttack);\n    }\n    status = enemy.getGameboard().receiveAttack(attack);\n    if (status) {\n      showMessage(textLines.atckExitoso);\n    } else {\n      showMessage(textLines.atckFallido);\n    }\n    display.fillBoard(enemy.getGameboard().getCells(), false);\n    updateEnemyMap(enemy.getGameboard().getCells());\n    display.addCellsHoverEvent(enemyMap);\n    if (enemy.getGameboard().allShipsSunk()) {\n      return currentPlayer.getName();\n    }\n    if (!currentPlayer.getIsComputer()) {\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n    } else if (currentPlayer.getIsComputer() && enemy.getIsComputer()) {\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n    }\n    const temp = currentPlayer;\n    currentPlayer = enemy;\n    enemy = temp;\n  }\n  return null;\n}\n\nfunction chooseInitialPlayer(player1, player2) {\n  const names = [player1.name, player2.name];\n  const nameChoosen = names[Math.floor(Math.random() * 2)];\n  let initialPlayer;\n  let secondPlayer;\n  if (nameChoosen === player1.name) {\n    initialPlayer = player1;\n    secondPlayer = player2;\n  } else {\n    initialPlayer = player2;\n    secondPlayer = player1;\n  }\n  return { initialPlayer, secondPlayer };\n}\n\nfunction parsePlayersGameboard(player) {\n  const gameboard = JSON.parse(\n    sessionStorage.getItem(`${player}Gameboard`),\n    reviver\n  );\n  return gameboard;\n}\n\nfunction checkIfShowCurtain(initialPlayer, secondPlayer) {\n  if (initialPlayer.getIsComputer() || secondPlayer.getIsComputer()) {\n    const clickEvent = new Event(\"click\");\n    hideCurtainBtn.dispatchEvent(clickEvent);\n  }\n}\n\nfunction startNewGame() {\n  window.location.href = \"index.html\";\n}\n\nfunction setWinner(winner, player1, player2) {\n  if (winner === player1.name) {\n    showMessage(`${player1.name} ${textLines.winner} ${player2}`);\n    if (player1.getIsComputer()) {\n      display.finalBoard(player2.getGameboard().getCells(), true);\n      display.finalBoard(player1.getGameboard().getCells(), false);\n    } else {\n      display.finalBoard(player1.getGameboard().getCells(), true);\n      display.finalBoard(player2.getGameboard().getCells(), false);\n    }\n  } else {\n    showMessage(`${player2.name} ${textLines.winner} ${player1}`);\n    if (player2.getIsComputer()) {\n      display.finalBoard(player1.getGameboard().getCells(), true);\n      display.finalBoard(player2.getGameboard().getCells(), false);\n    } else {\n      display.finalBoard(player2.getGameboard().getCells(), true);\n      display.finalBoard(player1.getGameboard().getCells(), false);\n    }\n  }\n}\n\nconst player1Data = JSON.parse(sessionStorage.getItem(\"player1\"));\nconst player2Data = JSON.parse(sessionStorage.getItem(\"player2\"));\n\nconst player1Gameboard = parsePlayersGameboard(\"player1\");\nconst player2Gameboard = parsePlayersGameboard(\"player2\");\n\nconst player1 = new Player(player1Data.name, player1Data.isComputer);\nconst player2 = new Player(player2Data.name, player2Data.isComputer); // Change when tests over\nplayer1.gameboard = player1Gameboard;\nplayer2.gameboard = player2Gameboard;\n\nconst hideCurtainBtn = document.getElementById(\"ready\");\nconst newGameBtn = document.getElementById(\"newGame\");\nnewGameBtn.addEventListener(\"click\", startNewGame);\nhideCurtainBtn.addEventListener(\"click\", display.hideCurtain);\nconst { initialPlayer, secondPlayer } = chooseInitialPlayer(player1, player2);\ncheckIfShowCurtain(initialPlayer, secondPlayer);\nconst winner = await turnLoops(initialPlayer, secondPlayer);\nsetWinner(winner, player1, player2);\nnewGameBtn.disabled = false;\nconsole.log(winner);\n","function extractCoordinates(string) {\n  const result = string.replace(/[^0-9||,]*/g, \"\");\n  const array = result.split(\",\");\n  return [Number(array[0]), Number(array[1])];\n}\n\nexport default extractCoordinates;\n","import Ship from \"./ship\";\n\nexport default class Gameboard {\n  constructor() {\n    this.cells = this.#createCells();\n    this.ships = [];\n  }\n\n  #createCells() {\n    const newCells = new Map();\n    for (let x = 0; x < 10; x += 1) {\n      for (let y = 0; y < 10; y += 1) {\n        newCells.set(`[${x},${y}]`, \"empty\");\n      }\n    }\n    return newCells;\n  }\n\n  #checkIfCellsEmpty(position) {\n    return this.cells.get(position) === \"empty\";\n  }\n\n  checkIfPositionsAvailable(ship) {\n    return ship.getPositions().every(this.#checkIfCellsEmpty.bind(this));\n  }\n\n  addShip(coordinate, length, orientation) {\n    if (this.cells.get(coordinate) === \"empty\") {\n      const ship = new Ship(coordinate, length, orientation);\n      if (this.checkIfPositionsAvailable(ship)) {\n        this.ships.push(ship);\n        ship.getPositions().forEach((position) => {\n          this.cells.set(position, \"ship\");\n        });\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  receiveAttack(coordinate) {\n    let hitStatus = false;\n    this.ships.forEach((ship) => {\n      if (ship.hit(coordinate)) {\n        hitStatus = true;\n      }\n    });\n    if (hitStatus) {\n      this.cells.set(coordinate, \"hit\");\n      return true;\n    }\n    this.cells.set(coordinate, \"miss\");\n    return false;\n  }\n\n  allShipsSunk() {\n    return this.ships.every((ship) => ship.isSunk());\n  }\n\n  setShips(shipsMap) {\n    const shipArray = [];\n    shipsMap.forEach((shipObj) => {\n      shipArray.push(shipObj);\n      shipObj.getPositions().forEach((cell) => {\n        this.cells.set(cell, \"ship\");\n      });\n    });\n    this.ships = shipArray;\n  }\n}\n","import Ship from \"./ship\";\nimport Gameboard from \"./gameboard\";\n\nfunction mapReplacer(positions) {\n  const positionsArray = [];\n  positions.forEach((value, key) => {\n    positionsArray.push({ cell: key, value });\n  });\n  return positionsArray;\n}\n\nfunction parseShip(jsonValue) {\n  const { hits } = jsonValue;\n  const { positions } = jsonValue;\n  const replacerMap = new Map();\n  positions.forEach((cell) => {\n    replacerMap.set(cell.cell, cell.value);\n  });\n  const convertedShip = new Ship(\"[0,0]\", 0, \"vertical\");\n  convertedShip.positions = replacerMap;\n  convertedShip.hits = hits;\n  return convertedShip;\n}\n\nfunction parseGameboard(jsonValue) {\n  const { cells } = jsonValue;\n  const { ships } = jsonValue;\n  const replacerMap = new Map();\n  cells.forEach((cell) => {\n    replacerMap.set(cell.cell, cell.value);\n  });\n  const replacerGameboard = new Gameboard();\n  replacerGameboard.cells = replacerMap;\n  replacerGameboard.ships = ships;\n  return replacerGameboard;\n}\n\nfunction replacer(key, value) {\n  if (value instanceof Ship) {\n    return {\n      datatype: \"Ship\",\n      hits: value.hits,\n      positions: mapReplacer(value.positions),\n    };\n  }\n  if (value instanceof Map) {\n    return mapReplacer(value);\n  }\n  return value;\n}\n\nfunction reviver(key, value) {\n  if (typeof value === \"object\" && value !== null) {\n    if (value.datatype === \"Ship\") {\n      return parseShip(value);\n    }\n    if (value.ships) {\n      return parseGameboard(value);\n    }\n  }\n  return value;\n}\n\nexport { replacer, reviver };\n","import Gameboard from \"./gameboard\";\nimport extractCoordinates from \"./extractCoordinates\";\n\nexport default class Player {\n  constructor(name, isComputer) {\n    this.name = name;\n    this.isComputer = isComputer;\n    this.gameboard = new Gameboard();\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getIsComputer() {\n    return this.isComputer;\n  }\n\n  getGameboard() {\n    return this.gameboard;\n  }\n\n  #getPosibilities(enemyBoard) {\n    const possibleCells = [];\n    const hitCells = [];\n    enemyBoard.forEach((content, index) => {\n      if (content !== \"miss\") {\n        if (content === \"hit\") {\n          hitCells.push(index);\n        } else {\n          possibleCells.push(index);\n        }\n      }\n    });\n    return { possibleCells, hitCells };\n  }\n\n  #chooseNearHit(currentHits, enemyBoard) {\n    const possibleAttacks = [];\n    currentHits.forEach((hit) => {\n      const [x, y] = extractCoordinates(hit);\n      const nearHit = [\n        [x - 1, y],\n        [x + 1, y],\n        [x, y - 1],\n        [x, y + 1],\n      ];\n      nearHit.forEach((possition) => {\n        if (\n          possition[0] > -1 &&\n          possition[0] < 10 &&\n          possition[1] > -1 &&\n          possition[1] < 10\n        ) {\n          if (\n            enemyBoard.get(`[${possition[0]},${possition[1]}]`) === \"empty\" ||\n            enemyBoard.get(`[${possition[0]},${possition[1]}]`) === \"ship\"\n          ) {\n            possibleAttacks.push(`[${possition[0]},${possition[1]}]`);\n          }\n        }\n      });\n    });\n    return possibleAttacks;\n  }\n\n  #chooseRandom(possibleAttacks) {\n    return possibleAttacks[\n      Math.floor(Math.random() * (possibleAttacks.length - 1))\n    ];\n  }\n\n  getComputerPlay(enemyBoard) {\n    const possibleAttacks = this.#getPosibilities(enemyBoard);\n    if (possibleAttacks.hitCells.length > 0) {\n      const nearHitCells = this.#chooseNearHit(\n        possibleAttacks.hitCells,\n        enemyBoard\n      );\n      if (nearHitCells.length != 0) {\n        return this.#chooseRandom(nearHitCells);\n      }\n      return this.#chooseRandom(possibleAttacks.possibleCells);\n    }\n    return this.#chooseRandom(possibleAttacks.possibleCells);\n  }\n}\n","const typingEffect = null; // Global variable to hold the interval\n\nfunction showCurtain() {\n  const curtain = document.getElementById(\"curtain\");\n  curtain.classList.remove(\"closed\");\n}\n\nfunction hideCurtain() {\n  const curtain = document.getElementById(\"curtain\");\n  curtain.classList.add(\"closed\");\n}\n\nfunction createCell(coordinate, type) {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"cell\");\n  div.setAttribute(\"data-id\", coordinate);\n  switch (type) {\n    case \"empty\":\n      div.classList.add(\"empty\");\n      break;\n    case \"ship\":\n      div.classList.add(\"ship\");\n      break;\n    case \"hit\":\n      div.classList.add(\"hit\");\n      break;\n    case \"miss\":\n      div.classList.add(\"miss\");\n      break;\n    default:\n  }\n  return div;\n}\n\nfunction hoverEvent(cell, enemyMap) {\n  if (\n    enemyMap.get(cell.dataset.id) !== \"hit\" &&\n    enemyMap.get(cell.dataset.id) !== \"miss\"\n  ) {\n    cell.classList.add(\"hover\", \"valid\");\n  } else {\n    cell.classList.remove(\"valid\");\n    cell.classList.add(\"hover\", \"invalid\");\n  }\n}\n\nfunction addCellsHoverEvent(enemyMap) {\n  const enemyBoard = document.getElementById(\"enemyBoard\");\n  const cells = enemyBoard.querySelectorAll(\".cell\");\n  cells.forEach((cell) => {\n    cell.addEventListener(\"mouseover\", () => {\n      hoverEvent(cell, enemyMap);\n    });\n    cell.addEventListener(\"mouseout\", () => {\n      cell.classList.remove(\"hover\", \"invalid\", \"valid\");\n    });\n  });\n}\n\nfunction fillBoard(gameboard, showShips) {\n  if (showShips) {\n    const currentBoard = document.getElementById(\"currentBoard\");\n    currentBoard.replaceChildren();\n    for (let y = 10 - 1; y >= 0; y -= 1) {\n      for (let x = 0; x < 10; x += 1) {\n        const coordinate = `[${x},${y}]`;\n        currentBoard.appendChild(\n          createCell(coordinate, gameboard.get(coordinate))\n        );\n      }\n    }\n  } else {\n    const enemyBoard = document.getElementById(\"enemyBoard\");\n    enemyBoard.replaceChildren();\n    for (let y = 10 - 1; y >= 0; y -= 1) {\n      for (let x = 0; x < 10; x += 1) {\n        const coordinate = `[${x},${y}]`;\n        const value = gameboard.get(coordinate);\n        if (value === \"ship\") {\n          enemyBoard.appendChild(createCell(coordinate, \"empty\"));\n        } else {\n          enemyBoard.appendChild(createCell(coordinate, value));\n        }\n      }\n    }\n  }\n}\n\nfunction finalBoard(gameboard, isWinner) {\n  if (isWinner) {\n    const board = document.getElementById(\"currentBoard\");\n    board.replaceChildren();\n    for (let y = 10 - 1; y >= 0; y -= 1) {\n      for (let x = 0; x < 10; x += 1) {\n        const coordinate = `[${x},${y}]`;\n        board.appendChild(createCell(coordinate, gameboard.get(coordinate)));\n      }\n    }\n  } else {\n    const board = document.getElementById(\"enemyBoard\");\n    board.replaceChildren();\n    for (let y = 10 - 1; y >= 0; y -= 1) {\n      for (let x = 0; x < 10; x += 1) {\n        const coordinate = `[${x},${y}]`;\n        board.appendChild(createCell(coordinate, gameboard.get(coordinate)));\n      }\n    }\n  }\n}\n\nfunction setCurtainName(name) {\n  const curtainName = document.getElementById(\"playerName\");\n  curtainName.textContent = name;\n}\n\nexport {\n  showCurtain,\n  hideCurtain,\n  fillBoard,\n  finalBoard,\n  addCellsHoverEvent,\n  setCurtainName,\n};\n","import extractCoordinates from \"./extractCoordinates\";\n\nexport default class Ship {\n  constructor(initialCoordinate, length, orientation) {\n    this.positions = this.#addPositions(initialCoordinate, length, orientation);\n    this.hits = 0;\n  }\n\n  #addPositions(coordinate, length, orientation) {\n    const [xPosition, yPosition] = extractCoordinates(coordinate);\n    const positions = new Map();\n    if (orientation === \"vertical\") {\n      for (let i = 0; i < length; i += 1) {\n        positions.set(`[${xPosition},${yPosition + i}]`, false);\n      }\n    } else if (orientation === \"horizontal\") {\n      for (let i = 0; i < length; i += 1) {\n        positions.set(`[${xPosition + i},${yPosition}]`, false);\n      }\n    }\n    return positions;\n  }\n\n  getPositions() {\n    const array = [];\n    this.positions.forEach((position, coordinate) => {\n      array.push(coordinate);\n    });\n    return array;\n  }\n\n  getLength() {\n    return this.getPositions().length;\n  }\n\n  hit(coordinate) {\n    if (\n      this.positions.get(coordinate) !== undefined &&\n      this.positions.get(coordinate) !== true\n    ) {\n      const [xPosition, yPosition] = extractCoordinates(coordinate);\n      this.positions.set(`[${xPosition},${yPosition}]`, true);\n      this.hits += 1;\n      return true;\n    }\n    return false;\n  }\n\n  isSunk() {\n    return this.hits >= this.getLength();\n  }\n}\n"],"names":["enemyMap","Map","typingEffect","updateEnemyMap","gameboard","replaceMap","forEach","value","index","set","showMessage","message","gameStatus","document","getElementById","clearInterval","textContent","setInterval","length","substring","createCellAttackEvent","resolve","cells","querySelectorAll","Array","from","cell","addEventListener","coordinate","dataset","id","get","textLines","async","getUserAttack","turnLoops","initialPlayer","secondPlayer","status","currentPlayer","enemy","getGameboard","allShipsSunk","attack","getIsComputer","display","name","getCells","Promise","setTimeout","getComputerPlay","receiveAttack","getName","temp","chooseInitialPlayer","player1","player2","Math","floor","random","parsePlayersGameboard","player","JSON","parse","sessionStorage","getItem","reviver","checkIfShowCurtain","clickEvent","Event","hideCurtainBtn","dispatchEvent","startNewGame","window","location","href","setWinner","winner","player1Data","player2Data","player1Gameboard","player2Gameboard","Player","isComputer","newGameBtn","disabled","console","log","string","array","replace","split","Number","Gameboard","constructor","this","ships","newCells","x","y","position","checkIfPositionsAvailable","ship","getPositions","every","bind","addShip","orientation","Ship","push","hitStatus","hit","isSunk","setShips","shipsMap","shipArray","shipObj","mapReplacer","positions","positionsArray","key","replacer","datatype","hits","jsonValue","replacerMap","convertedShip","parseShip","replacerGameboard","parseGameboard","enemyBoard","possibleCells","hitCells","content","currentHits","possibleAttacks","extractCoordinates","possition","nearHitCells","showCurtain","classList","remove","hideCurtain","add","createCell","type","div","createElement","setAttribute","addCellsHoverEvent","hoverEvent","fillBoard","showShips","currentBoard","replaceChildren","appendChild","finalBoard","isWinner","board","setCurtainName","initialCoordinate","xPosition","yPosition","i","getLength","undefined"],"sourceRoot":""}