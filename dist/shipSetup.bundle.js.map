{"version":3,"file":"shipSetup.bundle.js","mappings":"uHAMA,QANA,SAA4BA,GAC1B,MACMC,EADSD,EAAOE,QAAQ,cAAe,IACxBC,MAAM,KAC3B,MAAO,CAACC,OAAOH,EAAM,IAAKG,OAAOH,EAAM,IACzC,C,8CCFe,MAAMI,EACnBC,WAAAA,GACEC,KAAKC,MAAQD,MAAK,IAClBA,KAAKE,MAAQ,EACf,CAEA,KACE,MAAMC,EAAW,IAAIC,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAC3BH,EAASI,IAAK,IAAGF,KAAKC,KAAM,SAGhC,OAAOH,CACT,CAEA,GAAmBK,GACjB,MAAoC,UAA7BR,KAAKC,MAAMQ,IAAID,EACxB,CAEAE,yBAAAA,CAA0BC,GACxB,OAAOA,EAAKC,eAAeC,MAAMb,MAAK,EAAmBc,KAAKd,MAChE,CAEAe,OAAAA,CAAQC,EAAYC,EAAQC,GAC1B,GAAmC,UAA/BlB,KAAKC,MAAMQ,IAAIO,GAAyB,CAC1C,MAAML,EAAO,IAAIQ,EAAAA,EAAKH,EAAYC,EAAQC,GAC1C,GAAIlB,KAAKU,0BAA0BC,GAKjC,OAJAX,KAAKE,MAAMkB,KAAKT,GAChBA,EAAKC,eAAeS,SAASb,IAC3BR,KAAKC,MAAMM,IAAIC,EAAU,OAAO,KAE3B,CAEX,CACA,OAAO,CACT,CAEAc,QAAAA,GACE,OAAOtB,KAAKC,KACd,CAEAsB,aAAAA,CAAcP,GACZ,IAAIQ,GAAY,EAMhB,OALAxB,KAAKE,MAAMmB,SAASV,IACdA,EAAKc,IAAIT,KACXQ,GAAY,EACd,IAEEA,GACFxB,KAAKC,MAAMM,IAAIS,EAAY,QACpB,IAEThB,KAAKC,MAAMM,IAAIS,EAAY,SACpB,EACT,CAEAU,YAAAA,GACE,OAAO1B,KAAKE,MAAMW,OAAOF,GAASA,EAAKgB,UACzC,CAEAC,QAAAA,CAASC,GACP,MAAMC,EAAY,GAClBD,EAASR,SAASU,IAChBD,EAAUV,KAAKW,GACfA,EAAQnB,eAAeS,SAASW,IAC9BhC,KAAKC,MAAMM,IAAIyB,EAAM,OAAO,GAC5B,IAEJhC,KAAKE,MAAQ4B,CACf,E,+DCrEF,SAASG,EAAYC,GACnB,MAAMC,EAAiB,GAIvB,OAHAD,EAAUb,SAAQ,CAACe,EAAOC,KACxBF,EAAef,KAAK,CAAEY,KAAMK,EAAKD,SAAQ,IAEpCD,CACT,CA4BA,SAASG,EAASD,EAAKD,GACrB,OAAIA,aAAiBjB,EAAAA,EACZ,CACLoB,SAAU,OACVC,KAAMJ,EAAMI,KACZN,UAAWD,EAAYG,EAAMF,YAG7BE,aAAiBhC,IACZ6B,EAAYG,GAEdA,CACT,CAEA,SAASK,EAAQJ,EAAKD,GACpB,GAAqB,iBAAVA,GAAgC,OAAVA,EAAgB,CAC/C,GAAuB,SAAnBA,EAAMG,SACR,OA3CN,SAAmBG,GACjB,MAAM,KAAEF,GAASE,GACX,UAAER,GAAcQ,EAChBC,EAAc,IAAIvC,IACxB8B,EAAUb,SAASW,IACjBW,EAAYpC,IAAIyB,EAAKA,KAAMA,EAAKI,MAAM,IAExC,MAAMQ,EAAgB,IAAIzB,EAAAA,EAAK,QAAS,EAAG,YAG3C,OAFAyB,EAAcV,UAAYS,EAC1BC,EAAcJ,KAAOA,EACdI,CACT,CAgCaC,CAAUT,GAEnB,GAAIA,EAAMlC,MACR,OAjCN,SAAwBwC,GACtB,MAAM,MAAEzC,GAAUyC,GACZ,MAAExC,GAAUwC,EACZC,EAAc,IAAIvC,IACxBH,EAAMoB,SAASW,IACbW,EAAYpC,IAAIyB,EAAKA,KAAMA,EAAKI,MAAM,IAExC,MAAMU,EAAoB,IAAIhD,EAAAA,EAG9B,OAFAgD,EAAkB7C,MAAQ0C,EAC1BG,EAAkB5C,MAAQA,EACnB4C,CACT,CAsBaC,CAAeX,EAE1B,CACA,OAAOA,CACT,C,8CC3De,MAAMjB,EACnBpB,WAAAA,CAAYiD,EAAmB/B,EAAQC,GACrClB,KAAKkC,UAAYlC,MAAK,EAAcgD,EAAmB/B,EAAQC,GAC/DlB,KAAKwC,KAAO,CACd,CAEA,GAAcxB,EAAYC,EAAQC,GAChC,MAAO+B,EAAWC,IAAaC,EAAAA,EAAAA,GAAmBnC,GAC5CkB,EAAY,IAAI9B,IACtB,GAAoB,aAAhBc,EACF,IAAK,IAAIkC,EAAI,EAAGA,EAAInC,EAAQmC,GAAK,EAC/BlB,EAAU3B,IAAK,IAAG0C,KAAaC,EAAYE,MAAM,QAE9C,GAAoB,eAAhBlC,EACT,IAAK,IAAIkC,EAAI,EAAGA,EAAInC,EAAQmC,GAAK,EAC/BlB,EAAU3B,IAAK,IAAG0C,EAAYG,KAAKF,MAAc,GAGrD,OAAOhB,CACT,CAEAtB,YAAAA,GACE,MAAMlB,EAAQ,GAId,OAHAM,KAAKkC,UAAUb,SAAQ,CAACb,EAAUQ,KAChCtB,EAAM0B,KAAKJ,EAAW,IAEjBtB,CACT,CAEA2D,SAAAA,GACE,OAAOrD,KAAKY,eAAeK,MAC7B,CAEAQ,GAAAA,CAAIT,GACF,QACqCsC,IAAnCtD,KAAKkC,UAAUzB,IAAIO,KACgB,IAAnChB,KAAKkC,UAAUzB,IAAIO,GACnB,CACA,MAAOiC,EAAWC,IAAaC,EAAAA,EAAAA,GAAmBnC,GAGlD,OAFAhB,KAAKkC,UAAU3B,IAAK,IAAG0C,KAAaC,MAAc,GAClDlD,KAAKwC,MAAQ,GACN,CACT,CACA,OAAO,CACT,CAEAb,MAAAA,GACE,OAAO3B,KAAKwC,MAAQxC,KAAKqD,WAC3B,E,gBClDF,SAASE,EAAWlD,EAAGC,GACrB,MAAM0B,EAAOwB,SAASC,cAAc,OAGpC,OAFAzB,EAAK0B,UAAUC,IAAI,QACnB3B,EAAK4B,aAAa,UAAY,IAAGvD,KAAKC,MAC/B0B,CACT,CA2BA,SAAS6B,IACSC,MAAMC,KAAKP,SAASQ,iBAAiB,gBAC7C3C,SAAS4C,IACfA,EAAOP,UAAUQ,OAAO,WAAW,GAEvC,CA6BA,SAASC,EAAoBC,GAC3B,MAAMC,EAAWb,SAASQ,iBAAkB,IAAGI,KACzCE,EAAUR,MAAMC,KAAKM,GAC3BC,EAAQ,GAAGC,UAAW,EACtBD,EAAQ,GAAGC,UAAW,CACxB,CAiBA,SAASC,IACP,MAAMC,EAAcjB,SAASQ,iBAAiB,eAC9C,QAAIF,MAAMC,KAAKU,GAAa5D,OAAOoD,GAAWA,EAAOM,aACnCf,SAASkB,eAAe,QAChCH,UAAW,GACZ,EAGX,CAqBA,SAASI,EAAUC,GACjB,MAAMC,EAAQrB,SAASkB,eAAe,gBACtCG,EAAMC,YAAcF,EACpBC,EAAMnB,UAAUC,IAAI,YACtB,C,+BCtHA,SAASoB,EAAkBC,GACzB,MAAMC,EAAiB,GAMvB,OALAD,EAAI3D,SAAQ,CAACe,EAAOpB,KACJ,UAAVoB,GACF6C,EAAe7D,KAAKJ,EACtB,IAEKiE,EAAeC,KAAKC,MAAMD,KAAKE,SAAWH,EAAehE,QAClE,CA2DA,QATA,SAA2BoE,GACzB,MAAMC,EAAe,GAKrB,OAJAxB,MAAMC,KAAKsB,GAAahE,SAAS4C,IAC/B,MAAMsB,EAAStB,EAAOuB,QAAQvE,OAC9BqE,EAAalE,KAAKmE,EAAO,IAlB7B,SAAyBrF,GACvB,MAAMuF,EAAY,IAAI3F,EAAAA,EAChB4F,EApCR,SAAiBxF,GACf,MAAMR,EAAQQ,EACd,IACIyF,EADAC,EAAelG,EAAMuB,OAGzB,KAAO2E,EAAe,GAEpBD,EAAcT,KAAKC,MAAMD,KAAKE,SAAWQ,GACzCA,GAAgB,GAEflG,EAAMkG,GAAelG,EAAMiG,IAAgB,CAC1CjG,EAAMiG,GACNjG,EAAMkG,IAIV,OAAOlG,CACT,CAmBwBmG,CAAQ3F,GAS9B,OARAwF,EAAcrE,SAASJ,IACrB,MAAM6E,EAnBV,SAAiBP,EAAQE,GAEvB,OAAc,CACZ,MAAMzE,EAAa+D,EAAkBU,EAAUnE,YACzCyE,EAAe,IAAI5E,EAAAA,EAAKH,EAAYuE,EAAQ,YAC5CS,EAAiB,IAAI7E,EAAAA,EAAKH,EAAYuE,EAAQ,cACpD,GAAIE,EAAU/E,0BAA0BqF,GACtC,MAAO,CAAE/E,aAAYE,YAAa,WAAYqE,UAEhD,GAAIE,EAAU/E,0BAA0BsF,GACtC,MAAO,CAAEhF,aAAYE,YAAa,aAAcqE,SAEpD,CACF,CAMqBxE,CAAQE,EAAQwE,GACjCA,EAAU1E,QACR+E,EAAS9E,WACT8E,EAASP,OACTO,EAAS5E,YACV,IAEIuE,CACT,CAQSQ,CAAgBX,EACzB,ECjDA,IAAIG,EAAY,IAAI3F,EAAAA,EAChBI,EAAQ,IAAIE,IACZ8F,EAAe,GACnB,MAAMC,EAAU,IAAI/F,IAqBpB,SAASgG,EAAYC,GACnB,MAAMrF,EAAaqF,EAAMC,OAAOd,QAAQe,GACxC,GAA6C,OAAzCC,eAAeC,QAAQ,cAAwB,CACjD,MAAM9F,EAbV,SAAoBK,GAClB,MAAMC,EAASuF,eAAeC,QAAQ,cAChCvF,EAAcsF,eAAeC,QAAQ,mBAE3C,OADehB,EAAU1E,QAAQC,EAAYC,EAAQC,GAE5CuE,EAAUvF,MAAMuF,EAAUvF,MAAMe,OAAS,GAE3C,IACT,CAKiByF,CAAW1F,GACxB,GAAIL,EAAM,CACR,MAAMgG,EAASH,eAAeC,QAAQ,UACtCvG,EAAMK,IAAIoG,EAAQhG,GFwBxB,SAAwB4F,GACtB,MAAMtC,EAAST,SAASkB,eAAe6B,GACnCtC,EAAOP,UAAUkD,SAAS,WAC5BzC,EAAoB,WACXF,EAAOP,UAAUkD,SAAS,cACnCzC,EAAoB,cACXF,EAAOP,UAAUkD,SAAS,aACnCzC,EAAoB,aACXF,EAAOP,UAAUkD,SAAS,gBACnCzC,EAAoB,gBACXF,EAAOP,UAAUkD,SAAS,iBACnCzC,EAAoB,eAExB,CEpCM0C,CAAeF,GACf9C,IACAW,IFON,SAA0BsC,EAAaX,GACrCW,EAAYzF,SAASL,IACNmF,EAAQ1F,IAAIO,GACpB0C,UAAUC,IAAI,OAAO,GAE9B,CEXMoD,CAAiBpG,EAAKC,eAAgBuF,GFuE5B3C,SAASkB,eAAe,gBAChChB,UAAUQ,OAAO,aEtEnBsC,eAAeQ,WAAW,aAC5B,MACErC,EAAU,oCAEd,MAAYH,GACVG,EAAU,gCAEd,CAWA,SAASsC,EAAYZ,GACnB,MACMa,EAZR,SAAuBlG,GACrB,MAAMC,EAASuF,eAAeC,QAAQ,cAChCvF,EAAcsF,eAAeC,QAAQ,mBACrCS,EAAe,IAAI/F,EAAAA,EAAKH,EAAYC,EAAQC,GAClD,OAAIuE,EAAU/E,0BAA0BwG,GAC/B,CAAEA,eAAcC,QAAQ,GAE1B,CAAED,eAAcC,QAAQ,EACjC,CAIuBC,CADFf,EAAMC,OAAOd,QAAQe,IAGxCJ,EAAQ9E,SAASW,IACfA,EAAK0B,UAAUQ,OAAO,QAAS,QAAS,UAAU,IAGhDgD,EAAaC,OACfD,EAAaA,aAAatG,eAAeS,SAASb,IACnC2F,EAAQ1F,IAAID,GACpBkD,UAAUC,IAAI,QAAS,QAAQ,IAGtCuD,EAAaA,aAAatG,eAAeS,SAASb,IAChD,MAAMwB,EAAOmE,EAAQ1F,IAAID,QACZ8C,IAATtB,GACFA,EAAK0B,UAAUC,IAAI,QAAS,UAC9B,GAGN,CA+BA,MAAM0D,EAAW7D,SAASkB,eAAe,SACnC4C,EAAQ9D,SAASkB,eAAe,SAChC6C,EAAU/D,SAASkB,eAAe,SAClC8C,EAAUhE,SAASkB,eAAe,SFpHxC,SAAkB+C,EAASC,GACzB,IAAK,IAAIpH,EAAImH,EAAanH,GAAK,EAAGA,GAAK,EACrC,IAAK,IAAID,EAAI,EAAGA,EEmHX,GFnHwBA,GAAK,GACP,IAArBqH,EAAYC,KAEdD,EAAYE,cAEZF,EAAYE,YAAYrE,EAAWlD,EAAGC,GAI9C,CE0GAuH,CAAS,EAAIP,GACb,MAAMQ,EAAWR,EAAMtD,iBAAiB,SAElC+D,EAAgBvE,SAASkB,eAAe,YACtBlB,SAASkB,eAAe,cAEhCsD,iBAAiB,UAAU,KACzCxB,eAAeyB,QAAQ,kBAAmB,aAAa,IAGzDF,EAAcC,iBAAiB,UAAU,KACvCxB,eAAeyB,QAAQ,kBAAmB,WAAW,IAGvDnE,MAAMC,KAAK+D,GAAUzG,SAASW,IAC5BA,EAAKgG,iBAAiB,QAAS5B,GAC/BpE,EAAKgG,iBAAiB,YAAaf,GACnCjF,EAAKgG,iBAAiB,aAAcf,GACpCd,EAAQ5F,IAAIyB,EAAKwD,QAAQe,GAAIvE,EAAK,IAGpCqF,EAASW,iBAAiB,SAAS,KF/FjBxE,SAASkB,eAAe,WAChChB,UAAUC,IAAI,SE+FA,IAGxB4D,EAAQS,iBAAiB,SAtCzB,WACE9H,EAAQ,IAAIE,IACZqF,EAAY,IAAI3F,EAAAA,EAChBqG,EAAQ9E,SAASW,IACfA,EAAK0B,UAAUQ,OAAO,OAAO,IFtBjC,WACE,MAAMO,EAAcjB,SAASQ,iBAAiB,eAC9BR,SAASkB,eAAe,QAChCH,UAAW,EACnBT,MAAMC,KAAKU,GAAapD,SAAS4C,IAC/BA,EAAOM,UAAW,CAAK,GAE3B,CEiBE2D,EACF,IAgCAZ,EAAMU,iBAAiB,YA3DvB,WACE7B,EAAQ9E,SAASW,IACfA,EAAK0B,UAAUQ,OAAO,QAAS,QAAS,UAAU,GAEtD,IAyDAsD,EAAQQ,iBAAiB,SAAS,KAChCvC,EAAU7D,SAAS1B,GACnB,MAAMiI,EAAWC,KAAKC,UAAU5C,EAAWnD,EAAAA,GACrCgG,EAAgB9B,eAAeC,QAAQ,WAC7CD,eAAeyB,QAAS,GAAEK,aAA0BH,GACpDI,OAAOC,SAASC,KAAOvC,CAAY,IFrHnBpC,MAAMC,KAAKP,SAASQ,iBAAiB,gBAC7C3C,SAAS4C,IACfA,EAAO+D,iBAAiB,SAAUU,KAtBtC,SAAoBrC,GAClB,MAAM,OAAEpF,GAAWoF,EAAMC,OAAOqC,QAAQ,iBAAiBnD,SACnD,GAAEe,GAAOF,EAAMC,OAAOqC,QAAQ,iBACpCnC,eAAeyB,QAAQ,aAAe,GAAEhH,KACxCuF,eAAeyB,QAAQ,SAAW,GAAE1B,IACtC,CAkBMqC,CAAWF,GATjB,SAA8BzE,GAC5BJ,IACAI,EAAOP,UAAUC,IAAI,WACvB,CAOMkF,CAAqB5E,EAAO,GAC5B,IEmHNuC,eAAeyB,QAAQ,UAAWzB,eAAeC,QAAQ,UF1DzD,WACE,MAAMqC,EAAatF,SAASkB,eAAe,cACrCqE,EAAWvF,SAASkB,eAAe,QACnCsE,EAASZ,KAAKa,MAClBzC,eAAeC,QAAQD,eAAeC,QAAQ,aAEhDqC,EAAWhE,YAAckE,EAAOE,KAChCH,EAASjE,YAAckE,EAAOE,IAChC,CEmDAC,GA7IiB,YA8IL3C,eAAeC,QAAQ,YA7I/BD,eAAeyB,QAAQ,QAAS,WAChC/B,EAAe,kBAEfA,EAAe,aA2InBM,eAAeyB,QAAQ,kBAAmB,cAC1CzB,eAAeQ,WAAW,cAnE1B,WACE,MAAMoC,EAAU5C,eAAeC,QAAQ,YACjC,WAAE4C,GAAejB,KAAKa,MAAMzC,eAAeC,QAAQ2C,IAEnD3E,EADmBjB,SAASkB,eAAe,YACZV,iBAAiB,UACtD,GAAIqF,EAAY,CACd5D,EAAY6D,EAAkB7E,GAC9B,MAAM0D,EAAWC,KAAKC,UAAU5C,EAAWnD,EAAAA,GACrCgG,EAAgB9B,eAAeC,QAAQ,WAC7CD,eAAeyB,QAAS,GAAEK,aAA0BH,GACpDI,OAAOC,SAASC,KAAOvC,CACzB,CACF,CAwDAqD,E","sources":["webpack://battleship/./src/extractCoordinates.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/jsonConversion.js","webpack://battleship/./src/ship.js","webpack://battleship/./src/setupOfShip/boardDisplay.js","webpack://battleship/./src/setupOfShip/autoShipPosition.js","webpack://battleship/./src/shipSetup.js"],"sourcesContent":["function extractCoordinates(string) {\n  const result = string.replace(/[^0-9||,]*/g, \"\");\n  const array = result.split(\",\");\n  return [Number(array[0]), Number(array[1])];\n}\n\nexport default extractCoordinates;\n","import Ship from \"./ship\";\n\nexport default class Gameboard {\n  constructor() {\n    this.cells = this.#createCells();\n    this.ships = [];\n  }\n\n  #createCells() {\n    const newCells = new Map();\n    for (let x = 0; x < 10; x += 1) {\n      for (let y = 0; y < 10; y += 1) {\n        newCells.set(`[${x},${y}]`, \"empty\");\n      }\n    }\n    return newCells;\n  }\n\n  #checkIfCellsEmpty(position) {\n    return this.cells.get(position) === \"empty\";\n  }\n\n  checkIfPositionsAvailable(ship) {\n    return ship.getPositions().every(this.#checkIfCellsEmpty.bind(this));\n  }\n\n  addShip(coordinate, length, orientation) {\n    if (this.cells.get(coordinate) === \"empty\") {\n      const ship = new Ship(coordinate, length, orientation);\n      if (this.checkIfPositionsAvailable(ship)) {\n        this.ships.push(ship);\n        ship.getPositions().forEach((position) => {\n          this.cells.set(position, \"ship\");\n        });\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  receiveAttack(coordinate) {\n    let hitStatus = false;\n    this.ships.forEach((ship) => {\n      if (ship.hit(coordinate)) {\n        hitStatus = true;\n      }\n    });\n    if (hitStatus) {\n      this.cells.set(coordinate, \"hit\");\n      return true;\n    }\n    this.cells.set(coordinate, \"miss\");\n    return false;\n  }\n\n  allShipsSunk() {\n    return this.ships.every((ship) => ship.isSunk());\n  }\n\n  setShips(shipsMap) {\n    const shipArray = [];\n    shipsMap.forEach((shipObj) => {\n      shipArray.push(shipObj);\n      shipObj.getPositions().forEach((cell) => {\n        this.cells.set(cell, \"ship\");\n      });\n    });\n    this.ships = shipArray;\n  }\n}\n","import Ship from \"./ship\";\nimport Gameboard from \"./gameboard\";\n\nfunction mapReplacer(positions) {\n  const positionsArray = [];\n  positions.forEach((value, key) => {\n    positionsArray.push({ cell: key, value });\n  });\n  return positionsArray;\n}\n\nfunction parseShip(jsonValue) {\n  const { hits } = jsonValue;\n  const { positions } = jsonValue;\n  const replacerMap = new Map();\n  positions.forEach((cell) => {\n    replacerMap.set(cell.cell, cell.value);\n  });\n  const convertedShip = new Ship(\"[0,0]\", 0, \"vertical\");\n  convertedShip.positions = replacerMap;\n  convertedShip.hits = hits;\n  return convertedShip;\n}\n\nfunction parseGameboard(jsonValue) {\n  const { cells } = jsonValue;\n  const { ships } = jsonValue;\n  const replacerMap = new Map();\n  cells.forEach((cell) => {\n    replacerMap.set(cell.cell, cell.value);\n  });\n  const replacerGameboard = new Gameboard();\n  replacerGameboard.cells = replacerMap;\n  replacerGameboard.ships = ships;\n  return replacerGameboard;\n}\n\nfunction replacer(key, value) {\n  if (value instanceof Ship) {\n    return {\n      datatype: \"Ship\",\n      hits: value.hits,\n      positions: mapReplacer(value.positions),\n    };\n  }\n  if (value instanceof Map) {\n    return mapReplacer(value);\n  }\n  return value;\n}\n\nfunction reviver(key, value) {\n  if (typeof value === \"object\" && value !== null) {\n    if (value.datatype === \"Ship\") {\n      return parseShip(value);\n    }\n    if (value.ships) {\n      return parseGameboard(value);\n    }\n  }\n  return value;\n}\n\nexport { replacer, reviver };\n","import extractCoordinates from \"./extractCoordinates\";\n\nexport default class Ship {\n  constructor(initialCoordinate, length, orientation) {\n    this.positions = this.#addPositions(initialCoordinate, length, orientation);\n    this.hits = 0;\n  }\n\n  #addPositions(coordinate, length, orientation) {\n    const [xPosition, yPosition] = extractCoordinates(coordinate);\n    const positions = new Map();\n    if (orientation === \"vertical\") {\n      for (let i = 0; i < length; i += 1) {\n        positions.set(`[${xPosition},${yPosition + i}]`, false);\n      }\n    } else if (orientation === \"horizontal\") {\n      for (let i = 0; i < length; i += 1) {\n        positions.set(`[${xPosition + i},${yPosition}]`, false);\n      }\n    }\n    return positions;\n  }\n\n  getPositions() {\n    const array = [];\n    this.positions.forEach((position, coordinate) => {\n      array.push(coordinate);\n    });\n    return array;\n  }\n\n  getLength() {\n    return this.getPositions().length;\n  }\n\n  hit(coordinate) {\n    if (\n      this.positions.get(coordinate) !== undefined &&\n      this.positions.get(coordinate) !== true\n    ) {\n      const [xPosition, yPosition] = extractCoordinates(coordinate);\n      this.positions.set(`[${xPosition},${yPosition}]`, true);\n      this.hits += 1;\n      return true;\n    }\n    return false;\n  }\n\n  isSunk() {\n    return this.hits >= this.getLength();\n  }\n}\n","function createCell(x, y) {\n  const cell = document.createElement(\"div\");\n  cell.classList.add(\"cell\");\n  cell.setAttribute(\"data-id\", `[${x},${y}]`);\n  return cell;\n}\n\n// Utiliza loops para crear las celdas en orden decresiente vertical\n// y incremental horizontal, para colocar ids correctos\n// RowSize indica el tamaño de la cantidad de rows y columnas\n// documentObj es el objeto del cual se usa appendChild, no colocarlo\n// a menos que sea un test. Queda en default a document\nfunction fillGrid(rowSize, documentObj) {\n  for (let y = rowSize - 1; y >= 0; y -= 1) {\n    for (let x = 0; x < rowSize; x += 1) {\n      if (documentObj.test === true) {\n        // Si se hace un test\n        documentObj.appendChild();\n      } else {\n        documentObj.appendChild(createCell(x, y));\n      }\n    }\n  }\n}\n\nfunction shipSelect(event) {\n  const { length } = event.target.closest(\"[data-length]\").dataset;\n  const { id } = event.target.closest(\"[data-length]\");\n  sessionStorage.setItem(\"shipLength\", `${length}`);\n  sessionStorage.setItem(\"shipId\", `${id}`);\n}\n\nfunction removeSelected() {\n  const buttons = Array.from(document.querySelectorAll(\".shipButton\"));\n  buttons.forEach((button) => {\n    button.classList.remove(\"selected\");\n  });\n}\n\nfunction changeSelectedButton(button) {\n  removeSelected();\n  button.classList.add(\"selected\");\n}\n\nfunction addShipSelection() {\n  const buttons = Array.from(document.querySelectorAll(\".shipButton\"));\n  buttons.forEach((button) => {\n    button.addEventListener(\"click\", (e) => {\n      shipSelect(e);\n      changeSelectedButton(button);\n    });\n  });\n}\n\nfunction displayChangeOnReady() {\n  const curtain = document.getElementById(\"curtain\");\n  curtain.classList.add(\"closed\");\n}\n\nfunction changeCellToShip(coordinates, cellMap) {\n  coordinates.forEach((coordinate) => {\n    const cell = cellMap.get(coordinate);\n    cell.classList.add(\"ship\");\n  });\n}\n\nfunction disableClassButtons(shipClass) {\n  const nodeList = document.querySelectorAll(`.${shipClass}`);\n  const buttons = Array.from(nodeList);\n  buttons[1].disabled = true;\n  buttons[0].disabled = true;\n}\n\nfunction disableShipBtn(id) {\n  const button = document.getElementById(id);\n  if (button.classList.contains(\"carrier\")) {\n    disableClassButtons(\"carrier\");\n  } else if (button.classList.contains(\"battleship\")) {\n    disableClassButtons(\"battleship\");\n  } else if (button.classList.contains(\"submarine\")) {\n    disableClassButtons(\"submarine\");\n  } else if (button.classList.contains(\"lightCruiser\")) {\n    disableClassButtons(\"lightCruiser\");\n  } else if (button.classList.contains(\"heavyCruiser\")) {\n    disableClassButtons(\"heavyCruiser\");\n  }\n}\n\nfunction validateAllShipsReady() {\n  const shipButtons = document.querySelectorAll(\".shipButton\");\n  if (Array.from(shipButtons).every((button) => button.disabled)) {\n    const nextBtn = document.getElementById(\"next\");\n    nextBtn.disabled = false;\n    return true;\n  }\n  return false;\n}\n\nfunction changeButtonStatus() {\n  const shipButtons = document.querySelectorAll(\".shipButton\");\n  const nextBtn = document.getElementById(\"next\");\n  nextBtn.disabled = true;\n  Array.from(shipButtons).forEach((button) => {\n    button.disabled = false;\n  });\n}\n\nfunction setCurtainName() {\n  const playerName = document.getElementById(\"playerName\");\n  const pageName = document.getElementById(\"name\");\n  const player = JSON.parse(\n    sessionStorage.getItem(sessionStorage.getItem(\"current\"))\n  );\n  playerName.textContent = player.name;\n  pageName.textContent = player.name;\n}\n\nfunction showError(text) {\n  const error = document.getElementById(\"errorMessage\");\n  error.textContent = text;\n  error.classList.add(\"showError\");\n}\n\nfunction hideError() {\n  const error = document.getElementById(\"errorMessage\");\n  error.classList.remove(\"showError\");\n}\n\nexport {\n  fillGrid,\n  addShipSelection,\n  displayChangeOnReady,\n  changeCellToShip,\n  disableShipBtn,\n  validateAllShipsReady,\n  changeButtonStatus,\n  setCurtainName,\n  removeSelected,\n  showError,\n  hideError,\n};\n","import Gameboard from \"../gameboard.js\";\nimport Ship from \"../ship.js\";\n\nfunction selectCoordinates(map) {\n  const validPositions = [];\n  map.forEach((value, coordinate) => {\n    if (value === \"empty\") {\n      validPositions.push(coordinate);\n    }\n  });\n  return validPositions[Math.floor(Math.random() * validPositions.length)];\n}\n\nfunction shuffle(ships) {\n  const array = ships;\n  let currentIndex = array.length;\n  let randomIndex;\n  // While there remain elements to shuffle.\n  while (currentIndex > 0) {\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nfunction addShip(lenght, gameboard) {\n  const stop = false;\n  while (!stop) {\n    const coordinate = selectCoordinates(gameboard.getCells());\n    const verticalShip = new Ship(coordinate, lenght, \"vertical\");\n    const horizontalShip = new Ship(coordinate, lenght, \"horizontal\");\n    if (gameboard.checkIfPositionsAvailable(verticalShip)) {\n      return { coordinate, orientation: \"vertical\", lenght };\n    }\n    if (gameboard.checkIfPositionsAvailable(horizontalShip)) {\n      return { coordinate, orientation: \"horizontal\", lenght };\n    }\n  }\n}\n\nfunction createGameboard(ships) {\n  const gameboard = new Gameboard();\n  const shuffledShips = shuffle(ships);\n  shuffledShips.forEach((length) => {\n    const shipData = addShip(length, gameboard);\n    gameboard.addShip(\n      shipData.coordinate,\n      shipData.lenght,\n      shipData.orientation\n    );\n  });\n  return gameboard;\n}\n\nfunction computerPositions(buttonsNode) {\n  const shipsLengths = [];\n  Array.from(buttonsNode).forEach((button) => {\n    const lenght = button.dataset.length;\n    shipsLengths.push(lenght);\n  });\n  return createGameboard(shipsLengths);\n}\n\nexport default computerPositions;\n","import style from \"./styles/shipSetup.css\";\nimport {\n  fillGrid,\n  addShipSelection,\n  displayChangeOnReady,\n  changeCellToShip,\n  disableShipBtn,\n  validateAllShipsReady,\n  changeButtonStatus,\n  setCurtainName,\n  removeSelected,\n  hideError,\n  showError,\n} from \"./setupOfShip/boardDisplay\";\nimport Gameboard from \"./gameboard\";\nimport Ship from \"./ship\";\nimport { replacer } from \"./jsonConversion\";\nimport computerPositions from \"./setupOfShip/autoShipPosition\";\n\nlet gameboard = new Gameboard();\nlet ships = new Map();\nlet nextPageLink = \"\";\nconst cellMap = new Map();\n\nfunction setNextPage(player) {\n  if (player === \"player1\") {\n    sessionStorage.setItem(\"setup\", \"player2\");\n    nextPageLink = \"shipSetup.html\";\n  } else {\n    nextPageLink = \"board.html\";\n  }\n}\n\nfunction createShip(coordinate) {\n  const length = sessionStorage.getItem(\"shipLength\");\n  const orientation = sessionStorage.getItem(\"shipOrientation\");\n  const result = gameboard.addShip(coordinate, length, orientation);\n  if (result) {\n    return gameboard.ships[gameboard.ships.length - 1];\n  }\n  return null;\n}\n\nfunction onCellClick(event) {\n  const coordinate = event.target.dataset.id;\n  if (sessionStorage.getItem(\"shipLength\") !== null) {\n    const ship = createShip(coordinate);\n    if (ship) {\n      const shipId = sessionStorage.getItem(\"shipId\");\n      ships.set(shipId, ship);\n      disableShipBtn(shipId);\n      removeSelected();\n      validateAllShipsReady();\n      changeCellToShip(ship.getPositions(), cellMap);\n      hideError();\n      sessionStorage.removeItem(\"shipLength\");\n    } else {\n      showError(\"Elija otra posicion para el barco\");\n    }\n  } else if (!validateAllShipsReady) {\n    showError(\"Debe escoger un barco primero\");\n  }\n}\nfunction checkPosition(coordinate) {\n  const length = sessionStorage.getItem(\"shipLength\");\n  const orientation = sessionStorage.getItem(\"shipOrientation\");\n  const possibleShip = new Ship(coordinate, length, orientation);\n  if (gameboard.checkIfPositionsAvailable(possibleShip)) {\n    return { possibleShip, status: true };\n  }\n  return { possibleShip, status: false };\n}\n\nfunction onCellHover(event) {\n  const coordinate = event.target.dataset.id;\n  const possibleShip = checkPosition(coordinate);\n\n  cellMap.forEach((cell) => {\n    cell.classList.remove(\"hover\", \"valid\", \"invalid\");\n  });\n\n  if (possibleShip.status) {\n    possibleShip.possibleShip.getPositions().forEach((position) => {\n      const cell = cellMap.get(position);\n      cell.classList.add(\"hover\", \"valid\");\n    });\n  } else {\n    possibleShip.possibleShip.getPositions().forEach((position) => {\n      const cell = cellMap.get(position);\n      if (cell !== undefined) {\n        cell.classList.add(\"hover\", \"invalid\");\n      }\n    });\n  }\n}\n\nfunction removeHover() {\n  cellMap.forEach((cell) => {\n    cell.classList.remove(\"hover\", \"valid\", \"invalid\");\n  });\n}\n\nfunction checkIfComputer() {\n  const current = sessionStorage.getItem(\"current\");\n  const { isComputer } = JSON.parse(sessionStorage.getItem(current));\n  const shipBtnContainer = document.getElementById(\"shipList\");\n  const shipButtons = shipBtnContainer.querySelectorAll(\"button\");\n  if (isComputer) {\n    gameboard = computerPositions(shipButtons);\n    const jsonText = JSON.stringify(gameboard, replacer);\n    const currentPlayer = sessionStorage.getItem(\"current\");\n    sessionStorage.setItem(`${currentPlayer}Gameboard`, jsonText);\n    window.location.href = nextPageLink;\n  }\n}\n\nfunction resetBoard() {\n  ships = new Map();\n  gameboard = new Gameboard();\n  cellMap.forEach((cell) => {\n    cell.classList.remove(\"ship\");\n  });\n  changeButtonStatus();\n}\n\nconst readyBtn = document.getElementById(\"ready\");\nconst board = document.getElementById(\"board\");\nconst restBtn = document.getElementById(\"reset\");\nconst nextBtn = document.getElementById(\"next\");\nfillGrid(10, board);\nconst cellList = board.querySelectorAll(\".cell\");\n\nconst verticalRadio = document.getElementById(\"vertical\");\nconst horizontalRadio = document.getElementById(\"horizontal\");\n\nhorizontalRadio.addEventListener(\"change\", () => {\n  sessionStorage.setItem(\"shipOrientation\", \"horizontal\");\n});\n\nverticalRadio.addEventListener(\"change\", () => {\n  sessionStorage.setItem(\"shipOrientation\", \"vertical\");\n});\n\nArray.from(cellList).forEach((cell) => {\n  cell.addEventListener(\"click\", onCellClick);\n  cell.addEventListener(\"mouseover\", onCellHover);\n  cell.addEventListener(\"touchstart\", onCellHover);\n  cellMap.set(cell.dataset.id, cell);\n});\n\nreadyBtn.addEventListener(\"click\", () => {\n  displayChangeOnReady();\n});\n\nrestBtn.addEventListener(\"click\", resetBoard);\nboard.addEventListener(\"mouseout\", removeHover);\n\nnextBtn.addEventListener(\"click\", () => {\n  gameboard.setShips(ships);\n  const jsonText = JSON.stringify(gameboard, replacer);\n  const currentPlayer = sessionStorage.getItem(\"current\");\n  sessionStorage.setItem(`${currentPlayer}Gameboard`, jsonText);\n  window.location.href = nextPageLink;\n});\naddShipSelection();\nsessionStorage.setItem(\"current\", sessionStorage.getItem(\"setup\"));\nsetCurtainName();\nsetNextPage(sessionStorage.getItem(\"current\"));\nsessionStorage.setItem(\"shipOrientation\", \"horizontal\");\nsessionStorage.removeItem(\"shipLength\");\ncheckIfComputer();\n"],"names":["string","array","replace","split","Number","Gameboard","constructor","this","cells","ships","newCells","Map","x","y","set","position","get","checkIfPositionsAvailable","ship","getPositions","every","bind","addShip","coordinate","length","orientation","Ship","push","forEach","getCells","receiveAttack","hitStatus","hit","allShipsSunk","isSunk","setShips","shipsMap","shipArray","shipObj","cell","mapReplacer","positions","positionsArray","value","key","replacer","datatype","hits","reviver","jsonValue","replacerMap","convertedShip","parseShip","replacerGameboard","parseGameboard","initialCoordinate","xPosition","yPosition","extractCoordinates","i","getLength","undefined","createCell","document","createElement","classList","add","setAttribute","removeSelected","Array","from","querySelectorAll","button","remove","disableClassButtons","shipClass","nodeList","buttons","disabled","validateAllShipsReady","shipButtons","getElementById","showError","text","error","textContent","selectCoordinates","map","validPositions","Math","floor","random","buttonsNode","shipsLengths","lenght","dataset","gameboard","shuffledShips","randomIndex","currentIndex","shuffle","shipData","verticalShip","horizontalShip","createGameboard","nextPageLink","cellMap","onCellClick","event","target","id","sessionStorage","getItem","createShip","shipId","contains","disableShipBtn","coordinates","changeCellToShip","removeItem","onCellHover","possibleShip","status","checkPosition","readyBtn","board","restBtn","nextBtn","rowSize","documentObj","test","appendChild","fillGrid","cellList","verticalRadio","addEventListener","setItem","changeButtonStatus","jsonText","JSON","stringify","currentPlayer","window","location","href","e","closest","shipSelect","changeSelectedButton","playerName","pageName","player","parse","name","setCurtainName","current","isComputer","computerPositions","checkIfComputer"],"sourceRoot":""}